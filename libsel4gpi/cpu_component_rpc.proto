syntax = "proto3";
import 'nanopb.proto';

enum CpuComponentError {
    NONE = 0;           /* no error */
    UNKNOWN = 11;       /* (XXX) manually set to seL4_NumErrors */
}

message CpuAllocMessage {
    /* No content */
};

message CpuConfigMessage {
    uint64 ipc_buf_addr = 1;    /* vaddr of the IPC buffer in the bound ADS */
    uint64 fault_ep_cap = 2;    /* cap ptr of the fault endpont in the bound cspace */
    uint64 cnode_guard = 3;     /* cnode guard bits for the bound cspace */
};

message CpuChangeVspaceMessage {
    /* No content */
};

message CpuStartMessage {
    /* No content */
};

message CpuElevatePrivilegeMessage {
    /* No content */
};

message CpuTlsBaseMessage {
    uint64 tls_base_addr = 1;    /* vaddr of the TLS base in the bound ADS */
};

message CpuSuspendMessage {
    /* No content */
};

message CpuWriteRegistersMessage {
    uint32 resume = 1;
    repeated uint64 reg_buf = 2 [(nanopb).max_count = 36]; /* buffer for seL4_UserContext */
};

message CpuReadRegistersMessage {
    /* No content */
};

message CpuDisconnectMessage {
    /* No content */
};

message CpuWriteVcpuMessage {
    uint64 reg = 1;
    uint64 val = 2;
};

message CpuReadVcpuMessage {
}

message CpuInjectIrqMessage {
    uint32 virq = 1;
    uint32 prio = 2;
    uint32 group = 3;
    uint32 idx = 4;
};

message CpuAckVppiMessage {
    uint32 irq = 1;
};

message CpuMessage {
    uint64 magic = 100;
    oneof msg {
        CpuAllocMessage alloc = 1;
        CpuChangeVspaceMessage change_vspace = 2;
        CpuStartMessage start = 3;
        CpuElevatePrivilegeMessage elevate_privilege = 4;
        CpuTlsBaseMessage tls_base = 5;
        CpuSuspendMessage suspend = 6;
        CpuConfigMessage config = 7;
        CpuWriteRegistersMessage write_reg = 8;
        CpuReadRegistersMessage read_reg = 9;
        CpuDisconnectMessage disconnect = 10;
        CpuInjectIrqMessage inject_irq = 11;
        CpuAckVppiMessage ack_vppi = 12;
    };
};

message CpuAllocReturnMessage {
    uint64 slot = 1;        /* slot for the CPU cap */
    uint32 id = 2;          /* ID of the allocated CPU */
};

/* return from a basic Cpu Component message */
message CpuBasicReturnMessage {
    /* No content */
};

message CpuReadRegistersReturnMessage {
    repeated uint64 reg_buf = 1 [(nanopb).max_count = 36]; /* buffer for seL4_UserContext */
}

/* message type for all Cpu Component return messages */
message CpuReturnMessage {
    CpuComponentError errorCode = 1;
    oneof msg {
        CpuBasicReturnMessage basic = 2;
        CpuAllocReturnMessage alloc = 3;
        CpuReadRegistersReturnMessage read_reg = 4;
    };
};
