syntax = "proto3";
import 'nanopb.proto';

enum PdComponentError {
    NONE = 0;           /* no error */
    UNKNOWN = 11;       /* (XXX) manually set to seL4_NumErrors */
}

enum PdWorkAction {
    NO_WORK = 0;        /* there is no work to be done */
    EXTRACT = 1;        /* work action to extract model state */
    FREE = 2;           /* work action to free a resource */
    DESTROY = 3;        /* work action to destroy a resource / space */
};

message PdAllocMessage {
    /* No content */
};

message PdTerminateMessage {
    /* No content */
};

message PdNextSlotMessage {
    /* No content */
};

message PdFreeSlotMessage {
    uint64 slot = 1;            /* the slot number to free */
};

message PdClearSlotMessage {
    uint64 slot = 1;            /* the slot number to free */
};

message PdSendCapMessage {
    bool is_core_cap = 1;       /* true if the cap is a core cap (PD's own PD, ADS, or CPU) */
};

message PdDumpMessage {
    /* No content */
};

message PdShareRDEMessage {
    uint32 res_type = 1;        /* resource type of the RDE */
    uint32 space_id = 2;        /* space ID of the RDE */
};

message PdRemoveRDEMessage {
    uint32 res_type = 1;        /* resource type of the RDE */
    uint32 space_id = 2;        /* space ID of the RDE */
};

message PdGiveResourceMessage {
    uint32 pd_id = 1;           /* ID of the PD to receive the resource */
    uint32 space_id = 2;        /* ID of the resource's space */
    uint32 object_id = 3;       /* the resource's object ID */
};

message PdExitMessage {
    uint64 exit_code = 1;       /* exit code of the PD */
};

message PdBenchIPCMessage {
    bool do_cap_transfer = 1;   /* if true, send a cap through IPC in reply */
};

message PdSetupMessage {
    uint64 stack_top = 1;           /* address of the stack in the PD's ADS */
    uint64 entry_point = 2;         /* address of the code entry point in the PD's ADS */
    uint64 ipc_buf_addr = 3;        /* address of the IPC buffer in the PD's ADS */
    uint64 osm_data_addr = 4;       /* address of the init data in the PD's ADS */
    repeated uint64 args = 5 [(nanopb).max_count = 8]; /* args for the main function */
};

message PdShareResTypeMessage {
    uint32 res_type = 1;        /* resource type of the RDE */
};

message PdGetWorkMessage {
    /* No content */
};

message PdSendSubgraphMessage {
    bool has_data = 1;            /* true if this message contains data */
    uint32 n_requests = 2;        /* the number of requests fulfilled by this subgraph */
};

message PdMapResourceMessage {
    uint64 src_resource = 1;      /* global ID of the source resource */
    uint64 dest_resource = 2;     /* global ID of the dest resource */
}

message PdSetNameMessage {
    string pd_name = 1 [(nanopb).max_length = 40];
}

message PdFinishWorkMessage {
    uint32 n_requests = 1;        /* the number of requests fulfilled by this message */
};

message PdLinkChildMessage {
    /* No content */
};

/* message type for all PD component request messages */
message PdMessage {
    uint64 magic = 100;
    oneof msg {
        PdAllocMessage alloc = 1;
        PdTerminateMessage terminate = 2;
        PdNextSlotMessage next_slot = 3;
        PdClearSlotMessage clear_slot = 4;
        PdSendCapMessage send_cap = 5;
        PdDumpMessage dump = 6;
        PdShareRDEMessage share_rde = 7;
        PdRemoveRDEMessage remove_rde = 8;
        PdGiveResourceMessage give_resource = 9;
        PdExitMessage exit = 10;
        PdBenchIPCMessage bench_ipc = 11;
        PdSetupMessage setup = 12;
        PdShareResTypeMessage share_res_type = 13;
        PdGetWorkMessage get_work = 14;
        PdSendSubgraphMessage send_subgraph = 15;
        PdFreeSlotMessage free_slot = 16;
        PdMapResourceMessage map_resource = 17;
        PdSetNameMessage set_name = 18;
        PdFinishWorkMessage finish_work = 19;
        PdLinkChildMessage link_child = 20;
    }
};

message PdBasicReturnMessage {
    /* No content */
};

message PdWorkReturnMessage {
    PdWorkAction action = 1;                                            /* which work action to perform */
    repeated uint32 space_ids = 2 [(nanopb).max_count = 16];            /* space ID for the work */
    repeated uint32 object_ids = 3 [(nanopb).max_count = 16];           /* object IDs for the work */
    repeated uint32 pd_ids = 4 [(nanopb).max_count = 16];               /* client PD ID for the work */
}

message PdAllocReturnMessage {
    uint64 slot = 1;                /* slot where the PD cap is placed */
    uint32 id = 2;                  /* ID of the new PD */
}

message PdNextSlotReturnMessage {
    uint64 slot = 1;                /* free slot */
}

message PdSendCapReturnMessage {
    uint64 slot = 1;                /* slot where the cap was placed in the receiver PD */
}

message PdGiveResourceReturnMessage {
    uint64 slot = 1;                /* slot where the cap was placed in the receiver PD */
}

/* message type for all PD Component return messages */
message PdReturnMessage {
    PdComponentError errorCode = 1;
    oneof msg {
        PdBasicReturnMessage basic = 2;
        PdWorkReturnMessage work = 3;
        PdAllocReturnMessage alloc = 4;
        PdNextSlotReturnMessage next_slot = 5;
        PdSendCapReturnMessage send_cap = 6;
        PdGiveResourceReturnMessage give_resource = 7;
    };
};
